service: biletzele-api
# Create an optimized package for our functions

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-biletzele

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-2
  websocketApiRouteSelectionExpression: $request.body.action

  # These environment variables are made available to our functions
  # under process.env.
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ BiletzeleTable, Arn ]
        - Fn::Join:
            - "/"
            -
              - { "Fn::GetAtt": [ BiletzeleTable, Arn ] }
              - "index/*"
functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create_game:
    handler: game_functions/create_game.main
    events:
      - http:
          path: biletzele/create
          method: post
          cors: true
          authorizer: aws_iam
  get_games_by_status:
    handler: game_functions/get_games_by_status.main
    events:
      - http:
          path: biletzele/getgames/{status}
          method: get
          cors: true
          authorizer: aws_iam
  get_game:
    handler: game_functions/get_game.main
    events:
      - http:
          path: biletzele/getgame/{id}
          method: get
          cors: true
          authorizer: aws_iam
  start_game:
    handler: game_functions/start_game.main
    events:
      - http:
          path: biletzele/startgame/{id}
          method: post
          cors: true
          authorizer: aws_iam
  new_turn:
    handler: game_functions/new_turn.main
    events:
      - http:
          path: biletzele/newturn/{id}
          method: post
          cors: true
          authorizer: aws_iam
  delete_game:
    handler: game_functions/delete_game.main
    events:
      - http:
          path: biletzele/deleteone/{id}
          method: post
          cors: true
          authorizer: aws_iam
  socketConnect:
    handler: game_functions/connection.connectHandler
    events:
      - websocket:
          route: $connect
  socketDisconnect:
    handler: game_functions/connection.disconnectHandler
    events:
      - websocket:
          route: $disconnect
  enterRoom:
    handler: game_functions/connection.enterRoom
    events:
      - websocket:
          route: enterroom
  add_player_to_game:
    handler: game_functions/add_player_to_game.main
    events:
      - websocket:
          route: addplayer
  end_turn:
    handler: game_functions/end_turn.main
    events:
      - websocket:
          route: endturn
  end_round:
    handler: game_functions/end_round.main
    events:
      - websocket:
          route: endround
  end_game:
    handler: game_functions/end_game.main
    events:
      - websocket:
          route: endgame
  new_round:
    handler: game_functions/new_round.main
    events:
      - websocket:
          route: newround
  next_word_to_guess:
    handler: game_functions/next_word_to_guess.main
    events:
      - websocket:
            route: wordtoguess
  player_ready:
    handler: game_functions/player_ready.main
    events:
      - websocket:
          route: playerready
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}